#include "KVReconRawDataAnalyser.h"
#include "KVDataSet.h"

#include <KVClassFactory.h>

ClassImp(KVReconRawDataAnalyser)

void KVReconRawDataAnalyser::preInitAnalysis()
{
   TClass* recev_cl = TClass::GetClass(GetDataSet()->GetReconstructedEventClassName());
   fRecev = ((KVReconstructedEvent*)recev_cl->New());

   Info("preInitAnalysis", "Reconstructed event container class: %s", recev_cl->GetName());
}

void KVReconRawDataAnalyser::preInitRun()
{
   fEvRecon.reset(new KVEventReconstructor(gMultiDetArray, fRecev));
}

void KVReconRawDataAnalyser::preAnalysis()
{
   if (gMultiDetArray->HandledRawData()) {
      fEvRecon->ReconstructEvent(gMultiDetArray->GetFiredDetectors());
      fEvRecon->GetEvent()->SetNumber(GetEventNumber());
      gMultiDetArray->SetRawDataFromReconEvent(*(fEvRecon->GetEvent()->GetParameters()));
   }
}

void KVReconRawDataAnalyser::postAnalysis()
{
   if (gMultiDetArray->HandledRawData()) fEvRecon->GetEvent()->Clear();
}

void KVReconRawDataAnalyser::postEndRun()
{
   // the multidetector will be deleted and rebuilt at the beginning of the next run
   // (if there is one). the reconstructed event will contain stale pointers to the old
   // detectors etc. if we don't clear it now
   fRecev->Clear();
}

void KVReconRawDataAnalyser::Make(const Char_t* kvsname)
{
   //Automatic generation of derived class for raw data analysis

   KVClassFactory cf(kvsname, "Analysis of reconstructed raw data", "",
                     kTRUE, "ReconRawAnalysisTemplate");

   cf.GenerateCode();
}


/** \example ExampleReconRawAnalysis.cpp
# Example of an analysis class for reconstructed raw data

This is the analysis class generated by default by KaliVedaGUI for analysis of reconstructed raw data.

\include ExampleReconRawAnalysis.h
*/


