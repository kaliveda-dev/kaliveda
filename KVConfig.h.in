#ifndef KV_CONFIG__H
#define KV_CONFIG__H

// Configuration flags for current build set by options or
// depending on available external software
#cmakedefine WITH_GIT_INFOS
#cmakedefine WITH_GNU_INSTALL
#cmakedefine WITH_GEMINI
#cmakedefine WITH_MFM
#cmakedefine WITH_MESYTEC
#cmakedefine WITH_ZMQ
#cmakedefine ADD_DYN_PATH "${ADD_DYN_PATH}"
#cmakedefine WITH_DATAFLOW
#cmakedefine WITH_PROTOBUF
#cmakedefine WITH_OPENGL
#cmakedefine WITH_RSQLITE
#cmakedefine WITH_FITLTG
#cmakedefine WITH_BUILTIN_GRU
#cmakedefine CCIN2P3_XRD
#cmakedefine WITH_MULTICORE_CPU ${WITH_MULTICORE_CPU}
#cmakedefine WITH_BOOST
#cmakedefine CCIN2P3_BUILD
#define WITH_TEMPLATED_EVENTS

// Info on C++ standard used to compile code
#if __cplusplus > 199711L
#define WITH_CPP11
#if __cplusplus > 201103L
#define WITH_CPP14
#if __cplusplus > 201402L
#define WITH_CPP17
#endif
#endif
#endif

// will be defined for all ROOT versions before 6.00
// Note that we may well be using ROOT5 (thus with cint/rootcint) and
// at the same time have C++11 compatibility, therefore WITH_CPP11
// does not always mean that we can liberally pepper our class declarations
// with exotic members - rootcint doesn't like it
#cmakedefine USING_ROOT5

// will be defined for all ROOT versions from 6.00 onwards
#cmakedefine USING_ROOT6

// allow use of unique_ptr with C++98
#include <memory>
#ifndef WITH_CPP11
#define unique_ptr auto_ptr
#endif
using std::unique_ptr;

// macro which expands to default constructor
#define ROOT_DEF_CTOR(classname,basename) \
   classname() : basename() {}

// macro which expands to constructor with name
#define ROOT_NAME_CTOR(classname,basename) \
   classname(const Char_t* name) : basename(name) {}

// macro which expands to default constructor
#define ROOT_DEF_CTOR_WITH_INIT(classname,basename) \
   classname() : basename() { init(); }

// macro which expands to constructor with name
#define ROOT_NAME_CTOR_WITH_INIT(classname,basename) \
   classname(const Char_t* name) : basename(name) { init(); }

// macro which expands to standard ROOT assignment by copy operator definition
// using object's Copy(TObject&) const method
// place in header file as needed
#define ROOT_COPY_ASSIGN_OP(name) \
   name& operator=(const name& other) \
  { \
     if(this != &other) \
     { \
       other.Copy(*this); \
     } \
     return (*this); \
   }

// macro which expands to standard ROOT copy constructor definition
// using object's Copy(TObject&) const method
// place in header file as needed
#define ROOT_COPY_CTOR(classname,basename) \
  classname(const classname& other) \
    : basename() \
  { \
     other.Copy(*this); \
  }

// provide set of constructors (default, named, copy) & a default destructor,
// plus copy assignment operator
#define ROOT_FULL_SET(classname,basename) \
   ROOT_DEF_CTOR(classname,basename) \
   ROOT_NAME_CTOR(classname,basename) \
   ROOT_COPY_CTOR(classname,basename) \
   virtual ~classname() {} \
   ROOT_COPY_ASSIGN_OP(classname)

// provide set of constructors (default, named, copy) & a default destructor,
// plus copy assignment operator, default & named ctors call init()
#define ROOT_FULL_SET_WITH_INIT(classname,basename) \
   ROOT_DEF_CTOR_WITH_INIT(classname,basename) \
   ROOT_NAME_CTOR_WITH_INIT(classname,basename) \
   ROOT_COPY_CTOR(classname,basename) \
   virtual ~classname() {} \
   ROOT_COPY_ASSIGN_OP(classname)

// avoid warnings from clang static analyzer
#ifdef WITH_CPP11
#define AUTO_NEW_CTOR(classname,ptr) \
   auto ptr = new classname
#else
#define AUTO_NEW_CTOR(classname,ptr) \
   classname* ptr = new classname
#endif
//-----------------------------------ROOT-version dependent compiler flags
//-----------------------------------to handle backwards compatibility
//
// if your code uses these functionalities, beware !!
// backwards compatibility is not assured !
// some solutions are given...


//---------------------------TGButton::SetEnabled available from v5.02/00 onwards
//SOLUTION:
//Include the following lines at the beginning of the code
//where SetEnabled is used:
//    #ifdef __WITHOUT_TGBUTTON_SETENABLED
//    #cmakedefine SetEnabled(flag) \
//       SetState( flag ? kButtonUp : kButtonDisabled )
//    #endif
//and then after the code add the following:
//    #ifdef __WITHOUT_TGBUTTON_SETENABLED
//    #undef SetEnabled
//    #endif
//Make sure that the argument is given even for default
//i.e. you must have SetEnabled(kTRUE), not SetEnabled()
//
//N.B. for signals and slots such as
//   obj->Connect("Toggled(Bool_t)", "TGTextButton", text_button, "SetEnabled(Bool_t)");
//you need to write your own intermediate slot which will receive
//the emitted signal and set the button state accordingly, as in this example:
//
//  #ifdef __WITHOUT_TGBUTTON_SETENABLED
//     void KVINDRARunSheetGUI::SetViewTreeEnabled(Bool_t on)
//     {
//	fViewTreeButton->SetState(on ? kButtonUp : kButtonDisabled );
//     }
//  #endif
//
//  #ifdef __WITHOUT_TGBUTTON_SETENABLED
//     cb->Connect("Toggled(Bool_t)", "KVINDRARunSheetGUI", this, "SetViewTreeEnabled(Bool_t)");
//     fViewTreeButton = tb;
//  #else
//     cb->Connect("Toggled(Bool_t)", "TGTextButton", tb, "SetEnabled(Bool_t)");
//  #endif
#cmakedefine __WITHOUT_TGBUTTON_SETENABLED

//----------------------------TMacro class available from v5.04/00 onwards
#cmakedefine __WITHOUT_TMACRO

//--------------------------------TSystem::FindFile available from v5.12/00 onwards
//SOLUTION:    use static method KVBase::FindFile  (same arguments and conventions)
#cmakedefine __WITHOUT_TSYSTEM_FINDFILE

//--------------------------------------Corrections to KVString::IsDigit & IsFloat
//The original KaliVeda versions of IsDigit and IsFloat were corrected
//in ROOT version 5.13/05. The versions in KVString correspond to these
//corrected versions, and should be used instead of TString for ROOT
//versions anterior to 5.13/05
//SOLUTION:   use KVString instead of TString
#cmakedefine __WITH_KVSTRING_ISDIGIT
#cmakedefine __WITH_KVSTRING_ISFLOAT

//--------Extended KaliVeda TString::Atoi, Atof and IsWhitespace are in TString from ROOT v5.08/00 onwards
//SOLUTION:   use KVString instead of TString
#cmakedefine __WITH_KVSTRING_ATOI
#cmakedefine __WITH_KVSTRING_ATOF
#cmakedefine __WITH_KVSTRING_ISWHITESPACE

//-------------------------TNetSystem(const char*, Bool_t = kTRUE) exists from v5.10 onwards
#cmakedefine __WITHOUT_TNETSYSTEM_CTOR_BOOL_T

//-------------------------TGNumberEntry::SetNumStyle & SetNumAttr exist from v5.11.02 onwards
#cmakedefine __WITHOUT_TGNUMBERENTRY_SETNUMSTYLE
#cmakedefine __WITHOUT_TGNUMBERENTRY_SETNUMATTR

//-------------------------TGComboBox::RemoveAll & Select(Int_t, Bool_t=kTRUE) exist from v5.12.00 onwards
#cmakedefine __WITHOUT_TGCOMBOBOX_REMOVEALL
#cmakedefine __WITHOUT_TGCOMBOBOX_SELECT_BOOL_T

//------------------THtml::SetProductName added in v5.17.00 (? - check this)
#cmakedefine __WITHOUT_THTML_SETPRODUCTNAME

//------------------TRefArray ctors and AddAt modified in v5.20.00
#cmakedefine __WITH_OLD_TREFARRAY

//------------------------New TCollection::Print methods in v5.21.02
#cmakedefine __WITH_NEW_TCOLLECTION_PRINT

//------------------------TCollection::Print(wildcard,option) from v4.01.04 to v5.20.00
#cmakedefine __WITH_TCOLLECTION_PRINT_WILDCARD

//------------------TClonesArray::ConstructedAt method from v5.32.00 onwards
#cmakedefine __WITHOUT_TCA_CONSTRUCTED_AT

//--------TString::IsBin/Oct/Dec, Itoa, Ltoa etc. are in TString from ROOT v5.33.02 onwards
//SOLUTION:   use KVString instead of TString
#cmakedefine __WITH_KVSTRING_ITOA

//--------Bug in TIter::operator*() before ROOT v5.34.28
#cmakedefine __WITH_TITER_BUG

#endif
