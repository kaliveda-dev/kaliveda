Deprecation Procedure and Info                      Thu 17 Dec 18:54:51 GMT 2015
--------------------------------------------------------------------------------

I have now deprecated much of the old VAMOS code as it is expected to be removed
at some future date and is largely superseded by the new code. The main reason
for deprecating the old code is to discourage its use while providing a time
frame within which analysis codes and such can be updated to use the new code.

The deprecated code resides in VAMOS/deprecated and is only compiled if the
USE_DEPRECATED_VAMOS build option is enabled at build time (cmake
-DUSE_DEPRECATED_VAMOS). If you choose to compile the deprecated code you will
see many warnings the first time you compile the VAMOS code (intended to
discourage future use of the deprecated code). If you subsequently attempt to
use any part of the deprecated code the compiler will print a warning to the
terminal the next time you recompile. 

However if you ABSOLUTELY MUST use the old code and do not desire to see the
compiler warnings (if for example they are blinding the terminal so you can't
see 'genuine' errors and warnings) then you should compile with the
-Wno-deprecated-declarations switch.

Each deprecated class contains a warning at the top of the header and source
file which should be easily visible. This should prevent people spending a lot
of time developing programs based off the old code only to find that the
compiler tells them that the class is deprecated.

Deprecation is handled using the macros defined in
VAMOS/deprecated/Deprecation.h. 

To deprecate a class:

                            ######################
                            # In the Header File #
                            ######################

#ifndef __SOME_CLASS_H__
#define __SOME_CLASS_H__

/**
   WARNING: This class has been deprecated and will eventually be removed. Do
   not use!

   This class is only compiled if the deprecated code is enabled in the build
   configuration (e.g. cmake -DUSE_DEPRECATED_VAMOS=yes). If you enable the
   deprecated code then a large number of warnings will be printed to the
   terminal. To disable these warnings (not advised) compile VAMOS with
   -Wno-deprecated-declarations. Despite these warnings the code should compile
   just fine. The warnings are there to prevent the unwitting use of the
   deprecated code (which should be strongly discouraged). 
  
   BY DEFAULT THIS CLASS IS NOT COMPILED.

   Deprecated by: Your Name (your_name@email.com)
   Date:          Thu 17 Dec 17:24:38 GMT 2015
*/

#include "Deprecation.h" // DEPRECATED_CLASS() Macro

... Your code goes here ...

class
{
    ...
};

DEPRECATED_CLASS(SomeClass);

#endif // __SOME_CLASS_H__ is not set

                            ######################
                            # In the Source File #
                            ######################

#include "SomeClass.h"

/**
   WARNING: This class has been deprecated and will eventually be removed. Do
   not use!

   This class is only compiled if the deprecated code is enabled in the build
   configuration (e.g. cmake -DUSE_DEPRECATED_VAMOS=yes). If you enable the
   deprecated code then a large number of warnings will be printed to the
   terminal. To disable these warnings (not advised) compile VAMOS with
   -Wno-deprecated-declarations. Despite these warnings the code should compile
   just fine. The warnings are there to prevent the unwitting use of the
   deprecated code (which should be strongly discouraged). 
  
   BY DEFAULT THIS CLASS IS NOT COMPILED.

   Deprecated by: Your Name (your_name@email.com)
   Date:          Thu 17 Dec 17:24:38 GMT 2015
*/

... Your code goes here ...


                                        Peter Wigg (peter.wigg.314159@gmail.com)

